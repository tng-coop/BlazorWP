@page "/upload-pdf"
@using WordPressPCL
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS
@inject AuthMessageHandler AuthHandler

<PageTitle>Upload PDF</PageTitle>

<h1>Upload PDF</h1>

@if (client == null)
{
    <p>No WordPress endpoint verified. Visit <NavLink href="/">Home</NavLink> first.</p>
}
else
{
    <div class="mb-3">
        <InputFile class="form-control" accept="application/pdf" OnChange="HandleFileChange" />

    </div>
    <canvas id="canvas" style="display:none;"></canvas>
    <img id="preview" class="img-fluid mb-3" alt="PDF preview" />
    <button class="btn btn-primary" @onclick="UploadAsync" disabled="@(_file == null)">Upload to WordPress</button>
    @if (!string.IsNullOrEmpty(status))
    {
        <div class="mt-2">@status</div>
    }
}

<script type="module">
    import * as pdfjsLib from './libman/pdfjs-dist/build/pdf.mjs';
    pdfjsLib.GlobalWorkerOptions.workerSrc = './libman/pdfjs-dist/build/pdf.worker.mjs';

    const cMapBaseUrl = './libman/pdfjs-dist/cmaps/';
    const cMapPacked  = true;

    const { getDocument } = pdfjsLib;
    const fileInput = document.getElementById('file-input');
    const canvas    = document.getElementById('canvas');
    const outputImg = document.getElementById('preview');

    fileInput?.addEventListener('change', async () => {
        const file = fileInput.files[0];
        if (!file) return;

        const arrayBuffer = await file.arrayBuffer();
        const loadingTask = getDocument({
            data: arrayBuffer,
            cMapUrl:  cMapBaseUrl,
            cMapPacked
        });
        const pdf = await loadingTask.promise;

        const page     = await pdf.getPage(1);
        const viewport = page.getViewport({ scale: 2 });

        canvas.width  = viewport.width;
        canvas.height = viewport.height;
        const ctx = canvas.getContext('2d');
        await page.render({ canvasContext: ctx, viewport }).promise;

        outputImg.src = canvas.toDataURL('image/png');
    });
</script>

@code {
    private WordPressClient? client;
    private IBrowserFile? _file;
    private string? status;

    protected override async Task OnInitializedAsync()
    {
        var endpoint = await JS.InvokeAsync<string?>("localStorage.getItem", "wpEndpoint");
        if (string.IsNullOrEmpty(endpoint))
        {
            return;
        }
        var baseUrl = endpoint.TrimEnd('/') + "/wp-json/";
        var httpClient = new HttpClient(AuthHandler) { BaseAddress = new Uri(baseUrl) };
        client = new WordPressClient(httpClient);
    }

    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        _file = e.File;
    }

    private async Task UploadAsync()
    {
        if (client == null || _file == null)
        {
            return;
        }

        status = "Uploading...";
        try
        {
            using var stream = _file.OpenReadStream(long.MaxValue);
            var media = await client.Media.CreateAsync(stream, _file.Name, "application/pdf");
            status = $"Uploaded media ID: {media.Id}";
        }
        catch (Exception ex)
        {
            status = $"Error: {ex.Message}";
        }
    }
}
