@page "/upload-pdf"
@using WordPressPCL
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject LocalStorageJsInterop StorageJs
@inject UploadPdfJsInterop PdfJs
@inject AuthMessageHandler AuthHandler

<PageTitle>Upload PDF</PageTitle>

<h1>Upload PDF</h1>
@if (client == null)
{
    <p>No WordPress endpoint verified. Visit <NavLink href="/">Home</NavLink> first.</p>
}
else
{
    <div class="mb-3">
        <InputFile id="file-input" class="form-control" accept="application/pdf" OnChange="OnFileSelected" />
    </div>
    <div class="d-flex align-items-center gap-2 mb-3">
        <button class="btn btn-primary" @onclick="UploadAsync" disabled="@(_file == null)">Upload to WordPress</button>
        @if (!string.IsNullOrEmpty(status)) { <span>@status</span> }
    </div>
    @if (isUploading)
    {
        <div class="progress mb-3">
            <div class="progress-bar" role="progressbar" style="width: @uploadProgress%" aria-valuenow="@uploadProgress" aria-valuemin="0" aria-valuemax="100">@uploadProgress%</div>
        </div>
    }
    <canvas id="canvas" style="display:none;"></canvas>
    <div class="preview-wrapper">
        <img id="preview" class="preview-image mb-3" alt="PDF preview" />
    </div>
    @if (wpSizes != null)
    {
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Size name</th>
                    <th>Width (px)</th>
                    <th>Height (px)</th>
                    <th>Crop mode</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var s in wpSizes)
                {
                    <tr>
                        <td>@s.Name</td>
                        <td>@s.Width</td>
                        <td>@s.Height</td>
                        <td>@s.CropMode</td>
                        <td>@s.Notes</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private WordPressClient? client;
    private IBrowserFile? _file;
    private string? status;
    private int uploadProgress;
    private bool isUploading;
    private DotNetStreamReference? _fileStreamRef;
    private PdfDimensions? pageInfo;
    private List<WpSize>? wpSizes;

    private record WpSize(string Name, int Width, int Height, string CropMode, string Notes);

    private static (int width, int height) SoftScale(int w, int h, int maxW, int maxH)
    {
        double ratio = 1;
        if (maxW > 0) ratio = Math.Min(ratio, (double)maxW / w);
        if (maxH > 0) ratio = Math.Min(ratio, (double)maxH / h);
        ratio = Math.Min(ratio, 1);
        return ((int)Math.Round(w * ratio), (int)Math.Round(h * ratio));
    }

    private void CalculateWpSizes()
    {
        if (pageInfo == null) return;
        var (w, h) = (pageInfo.Value.Width, pageInfo.Value.Height);
        var medium = SoftScale(w, h, 300, 300);
        var mediumLarge = SoftScale(w, h, 768, 0);
        var large = SoftScale(w, h, 1024, 1024);

        wpSizes = new()
        {
            new("thumbnail", 150, 150, "hard (exact)", "Square crop by default"),
            new("medium", medium.width, medium.height, "soft (max)", "Proportional—won’t exceed either axis"),
            new("medium_large", mediumLarge.width, mediumLarge.height, "soft (max)", "Max width 768, unlimited height"),
            new("large", large.width, large.height, "soft (max)", "Proportional—won’t exceed either axis"),
            new("full", w, h, "n/a", "The original uploaded file")
        };
    }

    protected override async Task OnInitializedAsync()
    {
        var endpoint = await StorageJs.GetItemAsync("wpEndpoint");
        if (string.IsNullOrEmpty(endpoint)) return;
        var baseUrl = endpoint.TrimEnd('/') + "/wp-json/";
        var httpClient = new HttpClient(AuthHandler) { BaseAddress = new Uri(baseUrl) };
        client = new WordPressClient(httpClient);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PdfJs.InitializeAsync("canvas", "preview");
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        _file = e.File;
        if (_file != null)
        {
            _fileStreamRef = new(_file.OpenReadStream(long.MaxValue));
            pageInfo = await PdfJs.RenderFirstPageAsync(
                _fileStreamRef,
                "canvas",
                "preview");
            CalculateWpSizes();
            StateHasChanged();
        }
    }

    private async Task UploadAsync()
    {
        if (client == null || _file == null) return;
        status = null; uploadProgress = 0; isUploading = true;
        try
        {
            using var stream = _file.OpenReadStream(long.MaxValue);
            using var progressStream = new ProgressStream(stream, (sent, total) =>
            {
                uploadProgress = (int)(sent * 100 / total);
                InvokeAsync(StateHasChanged);
            });
            var media = await client.Media.CreateAsync(progressStream, _file.Name, "application/pdf");
            status = $"Uploaded media ID: {media.Id}";
            uploadProgress = 100;
        }
        catch (Exception ex)
        {
            status = $"Error: {ex.Message}";
        }
        finally { isUploading = false; }
    }

    public async ValueTask DisposeAsync()
    {
        await PdfJs.DisposeAsync();
    }
}
