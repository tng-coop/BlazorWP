@page "/edit-demo"

<PageTitle>Edit Demo</PageTitle>

<h1>Edit Demo</h1>

<div class="mb-3">
    <button class="btn btn-primary me-1" @onclick="() => SelectDocAsync(Doc.A)">Document A</button>
    <button class="btn btn-primary me-1" @onclick="() => SelectDocAsync(Doc.B)">Document B</button>
    <button class="btn btn-primary" @onclick="() => SelectDocAsync(Doc.C)">Document C</button>
</div>

<TinyMCEEditor @ref="editor"
               OnInit="HandleEditorReady"
               ContentBlurred="OnEditorBlurred" />

<div class="row mt-3">
    <div class="col">
        <label>Document A</label>
        <textarea class="form-control" rows="5" readonly @bind="docA"></textarea>
    </div>
    <div class="col">
        <label>Document B</label>
        <textarea class="form-control" rows="5" readonly @bind="docB"></textarea>
    </div>
    <div class="col">
        <label>Document C</label>
        <textarea class="form-control" rows="5" readonly @bind="docC"></textarea>
    </div>
</div>

@code {
    private enum Doc { A, B, C }
    private Doc currentDoc = Doc.A;

    private TinyMCEEditor? editor;
    private string currentText = string.Empty;
    private string docA = string.Empty;
    private string docB = string.Empty;
    private string docC = string.Empty;

    protected override void OnInitialized()
    {
        currentText = docA;
    }

    private async Task HandleEditorReady()
    {
        if (editor != null)
        {
            await editor.SetContentAsync(currentText);
        }
    }

    private async Task SelectDocAsync(Doc doc)
    {
        await SaveCurrentAsync();
        currentDoc = doc;
        currentText = GetCurrent();
        if (editor != null)
        {
            await editor.SetContentAsync(currentText);
        }
    }

    private async Task SaveCurrentAsync()
    {
        if (editor != null)
        {
            currentText = await editor.GetContentAsync();
        }
        SaveCurrent();
    }

    private void SaveCurrent()
    {
        switch (currentDoc)
        {
            case Doc.A:
                docA = currentText;
                break;
            case Doc.B:
                docB = currentText;
                break;
            case Doc.C:
                docC = currentText;
                break;
        }
    }

    private string GetCurrent() => currentDoc switch
    {
        Doc.A => docA,
        Doc.B => docB,
        Doc.C => docC,
        _ => string.Empty
    };

    private Task OnEditorBlurred(string html)
    {
        currentText = html;
        SaveCurrent();
        return Task.CompletedTask;
    }
}
