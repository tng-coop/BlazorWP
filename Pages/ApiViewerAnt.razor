@page "/api-ant"
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Ant Design API Viewer</PageTitle>

<h1>Ant Design API Viewer</h1>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (error != null)
{
    <p class="text-danger">@error</p>
}
    else if (rootNodes != null)
    {
        <Tree TItem="AntJsonNode" DataSource="@rootNodes" KeyExpression="n => n.Id" ChildrenExpression="n => n.DataItem.Children" TitleExpression="n => n.DataItem.Title"></Tree>
    }
else if (formattedJson != null)
{
    <pre class="json-view">@formattedJson</pre>
}
else
{
    <p>No WordPress endpoint verified. Visit <NavLink href="/">Home</NavLink> first.</p>
}

@code {
    private string? formattedJson;
    private string? error;
    private bool loading = true;
    private List<AntJsonNode>? rootNodes;

    protected override async Task OnInitializedAsync()
    {
        var endpoint = await JS.InvokeAsync<string?>("localStorage.getItem", "wpEndpoint");
        if (string.IsNullOrEmpty(endpoint))
        {
            loading = false;
            return;
        }

        var rootEndpoint = endpoint;
        if (rootEndpoint.EndsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            rootEndpoint = rootEndpoint[..^"/wp/v2".Length];
        }

        try
        {
            var json = await Http.GetStringAsync(rootEndpoint);
            using var doc = JsonDocument.Parse(json);
            formattedJson = JsonSerializer.Serialize(doc.RootElement, new JsonSerializerOptions { WriteIndented = true });
            var root = BuildNode(doc.RootElement, "root");
            rootNodes = root.Children;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private static AntJsonNode BuildNode(JsonElement element, string name)
    {
        var node = new AntJsonNode { Id = Guid.NewGuid().ToString(), Title = name };
        switch (element.ValueKind)
        {
            case JsonValueKind.Object:
                foreach (var prop in element.EnumerateObject())
                {
                    node.Children.Add(BuildNode(prop.Value, prop.Name));
                }
                break;
            case JsonValueKind.Array:
                var index = 0;
                foreach (var val in element.EnumerateArray())
                {
                    node.Children.Add(BuildNode(val, $"[{index}]"));
                    index++;
                }
                break;
            default:
                node.Title = $"{name}: {element}";
                break;
        }
        return node;
    }

    public class AntJsonNode
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Title { get; set; } = string.Empty;
        public List<AntJsonNode> Children { get; set; } = new();
    }
}
