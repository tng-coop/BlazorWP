@page "/"

<PageTitle>Home</PageTitle>

<h1>WordPress analysis</h1>

<div class="mb-3">
    <label for="wpUrl" class="form-label">WordPress site URL</label>
    <input id="wpUrl" class="form-control" @bind="userUrl" @onkeydown="HandleKeyDown" placeholder="https://example.com" />
</div>
<button class="btn btn-primary" @onclick="CheckApi">Check API</button>
@if (!string.IsNullOrEmpty(verifiedEndpoint))
{
    <button class="btn btn-secondary ms-2" @onclick="OpenLogin">Login to WordPress</button>
}

@if (!string.IsNullOrEmpty(verifiedEndpoint))
{
    <p class="mt-3">Verified endpoint: @verifiedEndpoint</p>
}

@if (logs.Any())
{
    <div class="mt-3">
        <h5>Communication Log</h5>
        <pre class="log-box">@string.Join("\n", logs)</pre>
    </div>
}

@if (!string.IsNullOrEmpty(status))
{
    <p class="mt-3">@status</p>
}

@code {
    private string? userUrl;
    private string? status;
    private string? verifiedEndpoint;
    private List<string> logs = new();

    [Inject]
    private HttpClient Http { get; set; } = default!;

    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            verifiedEndpoint = await JS.InvokeAsync<string?>("localStorage.getItem", "wpEndpoint");
            if (!string.IsNullOrEmpty(verifiedEndpoint))
            {
                StateHasChanged();
            }
        }
    }

    private async Task CheckApi()
    {
        status = null;

        if (string.IsNullOrWhiteSpace(userUrl))
        {
            status = "Please enter a URL.";
            return;
        }

        var trimmed = userUrl!.Trim();
        var candidates = new List<string>();

        if (trimmed.StartsWith("http://", StringComparison.OrdinalIgnoreCase) ||
            trimmed.StartsWith("https://", StringComparison.OrdinalIgnoreCase))
        {
            candidates.Add(trimmed);
        }
        else
        {
            candidates.Add($"https://{trimmed}");
            candidates.Add($"http://{trimmed}");
        }

        foreach (var candidate in candidates)
        {
            logs.Add($"Checking {candidate}");
            await InvokeAsync(StateHasChanged);
            try
            {
                if (!Uri.TryCreate(candidate, UriKind.Absolute, out var baseUri))
                {
                    continue;
                }

                var builder = new UriBuilder(baseUri)
                {
                    Path = baseUri.AbsolutePath.TrimEnd('/') + "/wp-json/wp/v2"
                };
                var endpoint = builder.Uri.ToString().TrimEnd('/');

                logs.Add($"Requesting {endpoint}");
                await InvokeAsync(StateHasChanged);

                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
                var request = new HttpRequestMessage(HttpMethod.Get, endpoint);
                var rawRequest = await FormatRawRequest(request);
                logs.Add($"-> {rawRequest}");
                await InvokeAsync(StateHasChanged);

                var response = await Http.SendAsync(request, cts.Token);
                var raw = await FormatRawResponse(response);
                logs.Add($"<- {raw}");
                await InvokeAsync(StateHasChanged);
                if (response.IsSuccessStatusCode)
                {
                    verifiedEndpoint = endpoint;
                    await JS.InvokeVoidAsync("localStorage.setItem", "wpEndpoint", verifiedEndpoint);
                    status = $"Success! v2 endpoint is {endpoint}";
                    return;
                }
            }
            catch (Exception ex)
            {
                logs.Add($"Error: {ex.Message}");
                await InvokeAsync(StateHasChanged);
                status = $"Error: {ex.Message}";
            }
        }

        if (string.IsNullOrEmpty(status))
        {
            status = "Failed to verify endpoint.";
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CheckApi();
        }
    }

    private static async Task<string> FormatRawResponse(HttpResponseMessage response)
    {
        var sb = new StringBuilder();
        sb.Append($"HTTP/{response.Version.Major}.{response.Version.Minor} {(int)response.StatusCode} {response.ReasonPhrase}\r\n");
        foreach (var header in response.Headers)
        {
            sb.Append($"{header.Key}: {string.Join(", ", header.Value)}\r\n");
        }
        foreach (var header in response.Content.Headers)
        {
            sb.Append($"{header.Key}: {string.Join(", ", header.Value)}\r\n");
        }
        sb.Append("\r\n");
        var bytes = await response.Content.ReadAsByteArrayAsync();
        Encoding encoding;
        if (response.Content.Headers.ContentType?.CharSet is string cs)
        {
            try
            {
                encoding = Encoding.GetEncoding(cs);
            }
            catch
            {
                encoding = Encoding.UTF8;
            }
        }
        else
        {
            encoding = Encoding.UTF8;
        }
        sb.Append(encoding.GetString(bytes));
        return sb.ToString();
    }

    private static async Task<string> FormatRawRequest(HttpRequestMessage request)
    {
        var sb = new StringBuilder();
        var uri = request.RequestUri ?? new Uri("/", UriKind.Relative);
        sb.Append($"{request.Method} {uri.PathAndQuery} HTTP/{request.Version.Major}.{request.Version.Minor}\r\n");

        // Host header
        if (!request.Headers.Contains("Host") && uri.Host.Length > 0)
        {
            sb.Append($"Host: {uri.Host}\r\n");
        }

        foreach (var header in request.Headers)
        {
            sb.Append($"{header.Key}: {string.Join(", ", header.Value)}\r\n");
        }
        if (request.Content != null)
        {
            foreach (var header in request.Content.Headers)
            {
                sb.Append($"{header.Key}: {string.Join(", ", header.Value)}\r\n");
            }
        }
        sb.Append("\r\n");
        if (request.Content != null)
        {
            var bytes = await request.Content.ReadAsByteArrayAsync();
            sb.Append(Encoding.UTF8.GetString(bytes));
        }
        return sb.ToString();
    }

    private async Task OpenLogin()
    {
        if (string.IsNullOrEmpty(verifiedEndpoint))
        {
            return;
        }

        var loginUrl = GetLoginUrl(verifiedEndpoint);
        await JS.InvokeVoidAsync("open", loginUrl, "_blank", "noopener,noreferrer,width=800,height=600");
    }

    private static string GetLoginUrl(string endpoint)
    {
        var url = endpoint;
        if (url.EndsWith("/wp-json/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            url = url[..^"/wp-json/wp/v2".Length];
        }
        else if (url.EndsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            url = url[..^"/wp/v2".Length];
        }

        return url.TrimEnd('/') + "/wp-login.php";
    }
}
