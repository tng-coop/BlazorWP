@page "/"

<PageTitle>Home</PageTitle>

<h1>WordPress analysis</h1>

<div class="mb-3">
    <label for="wpUrl" class="form-label">WordPress site URL</label>
    <input id="wpUrl" class="form-control" @bind="userUrl" @onkeydown="HandleKeyDown" placeholder="https://example.com" />
</div>
<button class="btn btn-primary" @onclick="CheckApi">Check API</button>

@if (!string.IsNullOrEmpty(verifiedEndpoint))
{
    <p class="mt-3">Verified endpoint: @verifiedEndpoint</p>
}

@if (logs.Any())
{
    <div class="mt-3">
        <h5>Communication Log</h5>
        <pre class="log-box">@string.Join("\n", logs)</pre>
    </div>
}

@if (!string.IsNullOrEmpty(status))
{
    <p class="mt-3">@status</p>
}

@code {
    private string? userUrl;
    private string? status;
    private string? verifiedEndpoint;
    private List<string> logs = new();

    [Inject]
    private HttpClient Http { get; set; } = default!;

    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            verifiedEndpoint = await JS.InvokeAsync<string?>("localStorage.getItem", "wpEndpoint");
            if (!string.IsNullOrEmpty(verifiedEndpoint))
            {
                StateHasChanged();
            }
        }
    }

    private async Task CheckApi()
    {
        status = null;

        if (string.IsNullOrWhiteSpace(userUrl))
        {
            status = "Please enter a URL.";
            return;
        }

        var trimmed = userUrl!.Trim();
        var candidates = new List<string>();

        if (trimmed.StartsWith("http://", StringComparison.OrdinalIgnoreCase) ||
            trimmed.StartsWith("https://", StringComparison.OrdinalIgnoreCase))
        {
            candidates.Add(trimmed);
        }
        else
        {
            candidates.Add($"https://{trimmed}");
            candidates.Add($"http://{trimmed}");
        }

        foreach (var candidate in candidates)
        {
            logs.Add($"Checking {candidate}");
            await InvokeAsync(StateHasChanged);
            try
            {
                if (!Uri.TryCreate(candidate, UriKind.Absolute, out var baseUri))
                {
                    continue;
                }

                var builder = new UriBuilder(baseUri)
                {
                    Path = baseUri.AbsolutePath.TrimEnd('/') + "/wp-json/wp/v2"
                };
                var endpoint = builder.Uri.ToString().TrimEnd('/');

                logs.Add($"Requesting {endpoint}");
                await InvokeAsync(StateHasChanged);

                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
                var request = new HttpRequestMessage(HttpMethod.Get, endpoint);
                logs.Add($"-> {request}");
                await InvokeAsync(StateHasChanged);

                var response = await Http.SendAsync(request, cts.Token);
                logs.Add($"<- {response}");
                var bytes = await response.Content.ReadAsByteArrayAsync();
                var hex = BitConverter.ToString(bytes.Take(256).ToArray());
                logs.Add($"<- Body: {hex}");
                await InvokeAsync(StateHasChanged);
                if (response.IsSuccessStatusCode)
                {
                    verifiedEndpoint = endpoint;
                    await JS.InvokeVoidAsync("localStorage.setItem", "wpEndpoint", verifiedEndpoint);
                    status = $"Success! v2 endpoint is {endpoint}";
                    return;
                }
            }
            catch (Exception ex)
            {
                logs.Add($"Error: {ex.Message}");
                await InvokeAsync(StateHasChanged);
                status = $"Error: {ex.Message}";
            }
        }

        if (string.IsNullOrEmpty(status))
        {
            status = "Failed to verify endpoint.";
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CheckApi();
        }
    }
}
