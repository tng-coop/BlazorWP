@page "/events-demo"
@using TinyMCE.Blazor
@implements IDisposable
@inject IJSRuntime JS

<h3>TinyMCE Events Demo</h3>

<Editor Id="eventsEditor"
        ScriptSrc="libman/tinymce/tinymce.min.js"
        LicenseKey="gpl"
        JsConfSrc="tinymceBlazorFullConfig"
        @bind-Value="content" />

<div class="mt-3">
    <h5>Event Log</h5>
    <div @ref="logDiv" class="log-window">
        @foreach (var line in lines)
        {
            <div>@line</div>
        }
    </div>
</div>

@code {
    private static event Action<string>? EventReceived;
    private List<string> lines = new();
    private string content = string.Empty;
    private ElementReference logDiv;

    protected override void OnInitialized()
    {
        EventReceived += HandleEvent;
    }

    private void HandleEvent(string line)
    {
        lines.Add(line);
        InvokeAsync(async () =>
        {
            StateHasChanged();
            await JS.InvokeVoidAsync("scrollLogToBottom", logDiv);
        });
    }

    public void Dispose()
    {
        EventReceived -= HandleEvent;
    }

    [JSInvokable]
    public static Task OnEditorEvent(string editorId, string eventName, string jsonPayload)
    {
        var payload = JsonSerializer.Deserialize<EditorEventPayload>(jsonPayload);
        var line = $"[{DateTime.Now:HH:mm:ss}] {editorId} {eventName} (len={payload?.content?.Length ?? 0})";
        EventReceived?.Invoke(line);
        return Task.CompletedTask;
    }

    private class EditorEventPayload
    {
        public string? content { get; set; }
        public object? args { get; set; }
    }
}
