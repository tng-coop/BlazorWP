@page "/edit"
@using TinyMCE.Blazor
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JS
@inject JwtService JwtService

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

@if (!string.IsNullOrEmpty(status))
{
    <p>@status</p>
}

<div class="mb-3">
    <label class="form-label" for="postTitle">Title</label>
    <input id="postTitle" class="form-control" @bind="postTitle" />
</div>
<div class="d-flex align-items-center mb-2">
    <button class="btn btn-primary" @onclick="SaveDraft">Save Draft</button>
    @if (!string.IsNullOrEmpty(jwtToken))
    {
        <span class="ms-2 small"><code>@jwtToken</code></span>
    }
</div>

@code {
    private string? status;
    private string postTitle = string.Empty;
    private string? jwtToken;

    protected override async Task OnInitializedAsync()
    {
        jwtToken = await JwtService.GetCurrentJwtAsync();
    }

    private int? postId;

    private async Task SaveDraft()
    {
        jwtToken = await JwtService.GetCurrentJwtAsync();
        var endpoint = await JS.InvokeAsync<string?>("localStorage.getItem", "wpEndpoint");
        if (string.IsNullOrEmpty(endpoint))
        {
            status = "No WordPress endpoint configured.";
            return;
        }

        var title = string.IsNullOrWhiteSpace(postTitle)
            ? $"Draft {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}"
            : postTitle;
        var payload = new
        {
            title,
            content = _content,
            status = "draft"
        };

        var url = postId == null
            ? CombineUrl(endpoint, "/wp/v2/posts")
            : CombineUrl(endpoint, $"/wp/v2/posts/{postId}");

        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
            var response = await Http.PostAsJsonAsync(url, payload, cancellationToken: cts.Token);
            if (response.IsSuccessStatusCode)
            {
                if (postId == null)
                {
                    var json = await response.Content.ReadAsStringAsync(cts.Token);
                    try
                    {
                        using var doc = JsonDocument.Parse(json);
                        postId = doc.RootElement.GetProperty("id").GetInt32();
                    }
                    catch
                    {
                        // ignore parse errors
                    }
                    status = "Draft created";
                }
                else
                {
                    status = "Draft updated";
                }
            }
            else
            {
                status = $"Error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            status = $"Error: {ex.Message}";
        }
    }

    private static string CombineUrl(string site, string path)
    {
        path = NormalizePath(path);
        var trimmed = site.TrimEnd('/');

        if (trimmed.EndsWith("/wp-json/wp/v2", StringComparison.OrdinalIgnoreCase) &&
            path.StartsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            var baseUrl = trimmed[..^"/wp/v2".Length];
            return baseUrl.TrimEnd('/') + path;
        }

        if (trimmed.EndsWith("/wp-json", StringComparison.OrdinalIgnoreCase) &&
            path.StartsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            return trimmed + path;
        }

        if (!trimmed.Contains("/wp-json", StringComparison.OrdinalIgnoreCase) &&
            path.StartsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            return trimmed + "/wp-json" + path;
        }

        return trimmed + (path.StartsWith("/") ? path : "/" + path);
    }

    private static string NormalizePath(string path)
    {
        if (string.IsNullOrEmpty(path))
        {
            return path;
        }

        if (path.StartsWith("~/"))
        {
            path = path[1..];
        }

        if (path.StartsWith("/routes/", StringComparison.OrdinalIgnoreCase))
        {
            path = path["/routes".Length..];
        }
        else if (path.StartsWith("routes/", StringComparison.OrdinalIgnoreCase))
        {
            path = "/" + path["routes/".Length..];
        }

        var idx = path.IndexOf("/routes/", StringComparison.OrdinalIgnoreCase);
        if (idx >= 0)
        {
            var prefix = path[..idx];
            var after = path[(idx + "/routes".Length)..];
            if (after.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))
            {
                path = prefix + after[prefix.Length..];
            }
        }

        return path;
    }
}



<Editor
    ScriptSrc="libman/tinymce/tinymce.min.js"
    LicenseKey="gpl"
    @bind-Value="_content"
    JsConfSrc="myTinyMceConfig" />

@code {
    private string _content = "<p>Hello, world!</p>";
}