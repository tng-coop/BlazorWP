@page "/edit"
@using TinyMCE.Blazor
@using System.Text.Json
@using System.Threading
@using Humanizer
@inject HttpClient Http
@inject IJSRuntime JS
@inject JwtService JwtService
@implements IAsyncDisposable

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<div class="mb-2">
    <button class="btn btn-sm btn-outline-secondary me-1" @onclick="ToggleControls">@(showControls ? "Hide Details" : "Show Details")</button>
    <button class="btn btn-sm btn-outline-secondary me-1" @onclick="ToggleTable">@(showTable ? "Hide Posts" : "Show Posts")</button>
</div>

@if (showControls)
{
    @if (!string.IsNullOrEmpty(status))
    {
        <p>@status</p>
    }

    <div class="mb-3">
        <label class="form-label" for="postTitle">Title</label>
        <input id="postTitle" class="form-control" @bind="postTitle" @bind:event="oninput" @bind:after="OnTitleChanged" />
    </div>
    @if (mediaSources.Any())
    {
        <div class="mb-3">
            <label class="form-label" for="mediaSource">Media Source</label>
            <select id="mediaSource" class="form-select" @bind="selectedMediaSource" @bind:after="OnMediaSourceChanged">
                <option value="">-- choose media site --</option>
                @foreach (var site in mediaSources)
                {
                    <option value="@site">@site</option>
                }
            </select>
        </div>
    }

    <div class="d-flex align-items-center mb-2">
        <button class="btn btn-success me-2" @onclick="NewPost">New</button>
        <button class="btn btn-primary me-2" @onclick="SaveDraft">Save Draft</button>
        <button class="btn btn-secondary me-2" @onclick="SubmitForReview">Submit for Review</button>
        @if (showRetractReview)
        {
            <button class="btn btn-warning me-2" @onclick="RetractReview">Retract Review</button>
        }
        <button class="btn btn-danger me-2" @onclick="CloseEditor">Close</button>
        <div class="ms-auto d-flex align-items-center">
            <span><strong>Status:</strong> @(isDirty ? "Dirty" : "Clean")</span>
            <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="RefreshPosts">Refresh</button>
        </div>
    </div>
}

@if (posts == null)
{
    <p><em>Loading posts...</em></p>
}
else if (showTable)
{
    <div class="form-check form-switch mb-2">
        <input class="form-check-input" type="checkbox" id="showTrashedToggle" @bind="showTrashed" @bind:after="OnShowTrashedChanged" />
        <label class="form-check-label" for="showTrashedToggle">Include trashed articles</label>
    </div>
    <div class="table-scroll" @ref="scrollContainer">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Edit</th>
                    <th>Id</th>
                    <th>Title</th>
                    <th>Author</th>
                    <th>Status</th>
                    <th>Publication Date</th>
                    <th>Change Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in DisplayPosts)
                {
                    <tr @key="p.Id" class="article-row @(IsSelected(p, postId) ? "table-primary" : null)" @onclick="() => OpenPost(p)">
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="() => EditPost(p)" @onclick:stopPropagation="true">Edit</button>
                        </td>
                        <td>@(p.Id > 0 ? p.Id.ToString() : "")</td>
                        <td>@p.Title</td>
                        <td>@(string.IsNullOrEmpty(p.AuthorName) ? (p.Author > 0 ? p.Author.ToString() : "") : p.AuthorName)</td>
                        <td>@p.Status</td>
                        <td>@(p.Date.HasValue ? p.Date.Value.Humanize() : "")</td>
                        <td>
                            @if (p.Id > 0 && !string.IsNullOrEmpty(p.Status))
                            {
                                <div class="dropdown">
                                    <button class="btn btn-sm @(GetStatusButtonClass(p.Status)) dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" @onclick:stopPropagation="true">
                                        @p.Status
                                    </button>
                                    <ul class="dropdown-menu">
                                        @foreach (var st in availableStatuses)
                                        {
                                            <li>
                                                <button type="button" class="dropdown-item @(p.Status == st ? "active" : null)" @onclick="() => ChangeStatus(p, st)" @onclick:stopPropagation="true">@st</button>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div @ref="scrollAnchor" class="scroll-anchor"></div>
    </div>
}




@if (isEditing)
{
    <TinyMCEEditor @bind-Value="_content" @bind-Value:after="OnContentChanged" />
}
else
{
    <div class="border p-2" @onclick="() => isEditing = true">
        @((MarkupString)_content)
    </div>
}

