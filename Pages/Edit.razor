@page "/edit"
@using TinyMCE.Blazor
@using System.Text.Json
@using System.Threading
@using Humanizer
@inject HttpClient Http
@inject IJSRuntime JS
@inject JwtService JwtService
@implements IAsyncDisposable

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<div class="mb-2">
    <button class="btn btn-sm btn-outline-secondary me-1" @onclick="ToggleControls">@(showControls ? "Hide Details" : "Show Details")</button>
    <button class="btn btn-sm btn-outline-secondary me-1" @onclick="ToggleTable">@(showTable ? "Hide Posts" : "Show Posts")</button>
</div>

@if (showControls)
{
    @if (!string.IsNullOrEmpty(status))
    {
        <p>@status</p>
    }

    <div class="mb-3">
        <label class="form-label" for="postTitle">Title</label>
        <input id="postTitle" class="form-control" @bind="postTitle" @bind:event="oninput" @bind:after="OnTitleChanged" />
    </div>
    @if (mediaSources.Any())
    {
        <div class="mb-3">
            <label class="form-label" for="mediaSource">Media Source</label>
            <select id="mediaSource" class="form-select" @bind="selectedMediaSource" @bind:after="OnMediaSourceChanged">
                <option value="">-- choose media site --</option>
                @foreach (var site in mediaSources)
                {
                    <option value="@site">@site</option>
                }
            </select>
        </div>
    }

    <div class="d-flex align-items-center mb-2">
        <button class="btn btn-success me-2" @onclick="NewPost">New</button>
        <button class="btn btn-primary me-2" @onclick="SaveDraft">Save Draft</button>
        <button class="btn btn-secondary me-2" @onclick="SubmitForReview">Submit for Review</button>
        @if (showRetractReview)
        {
            <button class="btn btn-warning me-2" @onclick="RetractReview">Retract Review</button>
        }
        <button class="btn btn-danger me-2" @onclick="CloseEditor">Close</button>
        <div class="ms-auto d-flex align-items-center">
            <span><strong>Status:</strong> @(isDirty ? "Dirty" : "Clean")</span>
            <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="RefreshPosts">Refresh</button>
        </div>
    </div>
}

@if (posts == null)
{
    <p><em>Loading posts...</em></p>
}
else if (showTable)
{
    <div class="form-check form-switch mb-2">
        <input class="form-check-input" type="checkbox" id="showTrashedToggle" @bind="showTrashed" @bind:after="OnShowTrashedChanged" />
        <label class="form-check-label" for="showTrashedToggle">Include trashed articles</label>
    </div>
    <div class="table-scroll" @ref="scrollContainer">
        <MudTable Items="DisplayPosts" Hover="true">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Author</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Publication Date</MudTh>
                <MudTh>Change Status</MudTh>
            </HeaderContent>
            <RowTemplate Context="p">
                <MudTr @key="p.Id" Class="article-row @(IsSelected(p, postId) ? 'mud-selected' : null)" OnClick="@(() => OpenPost(p))">
                    <MudTd DataLabel="Id">@((p.Id > 0 ? p.Id.ToString() : ""))</MudTd>
                    <MudTd DataLabel="Title">@p.Title</MudTd>
                    <MudTd DataLabel="Author">@(string.IsNullOrEmpty(p.AuthorName) ? (p.Author > 0 ? p.Author.ToString() : "") : p.AuthorName)</MudTd>
                    <MudTd DataLabel="Status">@p.Status</MudTd>
                    <MudTd DataLabel="Publication Date">@(p.Date.HasValue ? p.Date.Value.Humanize() : "")</MudTd>
                    <MudTd DataLabel="Change Status">
                        @if (p.Id > 0 && !string.IsNullOrEmpty(p.Status))
                        {
                            <MudMenu>
                                <ActivatorContent>
                                    <MudButton Variant="Variant.Outlined" Size="Size.Small" @onclick:stopPropagation="true">@p.Status</MudButton>
                                </ActivatorContent>
                                <ChildContent>
                                    @foreach (var st in availableStatuses)
                                    {
                                        <MudMenuItem Disabled="p.Status == st" OnClick="@(() => ChangeStatus(p, st))">@st</MudMenuItem>
                                    }
                                </ChildContent>
                            </MudMenu>
                        }
                    </MudTd>
                </MudTr>
            </RowTemplate>
        </MudTable>
        <div @ref="scrollAnchor" class="scroll-anchor"></div>
    </div>
}




<Editor
    Id="mainEditor"
    ScriptSrc="libman/tinymce/tinymce.min.js"
    LicenseKey="gpl"
    JsConfSrc="myTinyMceConfig"
    @bind-Value="_content"
    @bind-Value:after="UpdateDirty" />

