@page "/edit"
@using TinyMCE.Blazor
@using System.Text.Json
@using System.Threading
@inject HttpClient Http
@inject IJSRuntime JS
@inject JwtService JwtService

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

@if (!string.IsNullOrEmpty(status))
{
    <p>@status</p>
}

<div class="mb-3">
    <label class="form-label" for="postTitle">Title</label>
    <input id="postTitle" class="form-control" @bind="postTitle" />
</div>
@if (mediaSources.Any())
{
    <div class="mb-3">
        <label class="form-label" for="mediaSource">Media Source</label>
        <select id="mediaSource" class="form-select" value="@selectedMediaSource" @onchange="OnMediaSourceChanged">
            <option value="">-- choose media site --</option>
            @foreach (var site in mediaSources)
            {
                <option value="@site">@site</option>
            }
        </select>
    </div>
}

<div class="d-flex align-items-center mb-2">
    <button class="btn btn-primary" @onclick="SaveDraft">Save Draft</button>
</div>

@if (posts == null)
{
    <p><em>Loading posts...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in DisplayPosts)
            {
                <tr>
                    <td>@(p.Id > 0 ? p.Id.ToString() : "")</td>
                    <td>@p.Title</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private const string DraftKey = "currentDraft";

    private string? status;
    private string postTitle = string.Empty;
    private List<string> mediaSources = new();
    private string? selectedMediaSource;
    private List<PostSummary>? posts;

    private IEnumerable<PostSummary> DisplayPosts
    {
        get
        {
            var list = new List<PostSummary>();

            if (postId == null)
            {
                var title = string.IsNullOrWhiteSpace(postTitle)
                    ? "(Not saved yet)"
                    : $"{postTitle} (not saved yet)";
                list.Add(new PostSummary { Id = -1, Title = title });
            }
            else if (posts != null)
            {
                var current = posts.FirstOrDefault(p => p.Id == postId);
                if (current != null)
                {
                    list.Add(current);
                }
            }

            if (posts != null)
            {
                foreach (var p in posts)
                {
                    if (postId != null && p.Id == postId)
                    {
                        continue;
                    }
                    if (list.Count >= 3)
                    {
                        break;
                    }
                    list.Add(p);
                }
            }

            return list.Take(3);
        }
    }

    private class DraftInfo
    {
        public int? PostId { get; set; }
        public string? Title { get; set; }
        public string? Content { get; set; }
    }

    private class PostSummary
    {
        public int Id { get; set; }
        public string? Title { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var json = await JS.InvokeAsync<string?>("localStorage.getItem", DraftKey);
        if (!string.IsNullOrEmpty(json))
        {
            try
            {
                var info = JsonSerializer.Deserialize<DraftInfo>(json);
                if (info != null)
                {
                    postId = info.PostId;
                    postTitle = info.Title ?? string.Empty;
                    _content = info.Content ?? string.Empty;
                }
            }
            catch
            {
                // ignore deserialization errors
            }
        }

        await LoadPosts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            mediaSources = await JwtService.GetSiteInfoKeysAsync();
            selectedMediaSource = await JS.InvokeAsync<string?>("localStorage.getItem", "mediaSource");
            if (!string.IsNullOrEmpty(selectedMediaSource))
            {
                await JS.InvokeVoidAsync("setTinyMediaSource", selectedMediaSource);
            }
            StateHasChanged();
        }
    }

    private int? postId;

    private async Task SaveDraft()
    {
        var endpoint = await JS.InvokeAsync<string?>("localStorage.getItem", "wpEndpoint");
        if (string.IsNullOrEmpty(endpoint))
        {
            status = "No WordPress endpoint configured.";
            await SaveLocalDraftAsync();
            return;
        }

        var title = string.IsNullOrWhiteSpace(postTitle)
            ? $"Draft {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}"
            : postTitle;
        var payload = new
        {
            title,
            content = _content,
            status = "draft"
        };

        var url = postId == null
            ? CombineUrl(endpoint, "/wp/v2/posts")
            : CombineUrl(endpoint, $"/wp/v2/posts/{postId}");

        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
            var response = await Http.PostAsJsonAsync(url, payload, cancellationToken: cts.Token);
            if (response.IsSuccessStatusCode)
            {
                if (postId == null)
                {
                    var json = await response.Content.ReadAsStringAsync(cts.Token);
                    try
                    {
                        using var doc = JsonDocument.Parse(json);
                        postId = doc.RootElement.GetProperty("id").GetInt32();
                    }
                    catch
                    {
                        // ignore parse errors
                    }
                    status = "Draft created";
                }
                else
                {
                    status = "Draft updated";
                }
            }
            else
            {
                status = $"Error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            status = $"Error: {ex.Message}";
        }

        await SaveLocalDraftAsync();
    }

    private async Task SaveLocalDraftAsync()
    {
        var info = new DraftInfo
        {
            PostId = postId,
            Title = postTitle,
            Content = _content
        };
        var json = JsonSerializer.Serialize(info);
        await JS.InvokeVoidAsync("localStorage.setItem", DraftKey, json);
    }

    private async Task LoadPosts()
    {
        posts = null;
        var endpoint = await JS.InvokeAsync<string?>("localStorage.getItem", "wpEndpoint");
        if (string.IsNullOrEmpty(endpoint))
        {
            return;
        }

        var url = CombineUrl(endpoint, "/wp/v2/posts");
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));
            var response = await Http.GetAsync(url, cts.Token);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync(cts.Token);
                posts = new();
                using var doc = JsonDocument.Parse(json);
                foreach (var el in doc.RootElement.EnumerateArray())
                {
                    var id = el.GetProperty("id").GetInt32();
                    var title = el.GetProperty("title").GetProperty("rendered").GetString();
                    posts.Add(new PostSummary { Id = id, Title = title });
                }
            }
            else
            {
                posts = new();
            }
        }
        catch
        {
            posts = new();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnMediaSourceChanged(ChangeEventArgs e)
    {
        selectedMediaSource = e.Value?.ToString();
        if (string.IsNullOrEmpty(selectedMediaSource))
        {
            await JS.InvokeVoidAsync("localStorage.removeItem", "mediaSource");
        }
        else
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "mediaSource", selectedMediaSource);
        }
        await JS.InvokeVoidAsync("setTinyMediaSource", selectedMediaSource);
    }

    private static string CombineUrl(string site, string path)
    {
        path = NormalizePath(path);
        var trimmed = site.TrimEnd('/');

        if (trimmed.EndsWith("/wp-json/wp/v2", StringComparison.OrdinalIgnoreCase) &&
            path.StartsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            var baseUrl = trimmed[..^"/wp/v2".Length];
            return baseUrl.TrimEnd('/') + path;
        }

        if (trimmed.EndsWith("/wp-json", StringComparison.OrdinalIgnoreCase) &&
            path.StartsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            return trimmed + path;
        }

        if (!trimmed.Contains("/wp-json", StringComparison.OrdinalIgnoreCase) &&
            path.StartsWith("/wp/v2", StringComparison.OrdinalIgnoreCase))
        {
            return trimmed + "/wp-json" + path;
        }

        return trimmed + (path.StartsWith("/") ? path : "/" + path);
    }

    private static string NormalizePath(string path)
    {
        if (string.IsNullOrEmpty(path))
        {
            return path;
        }

        if (path.StartsWith("~/"))
        {
            path = path[1..];
        }

        if (path.StartsWith("/routes/", StringComparison.OrdinalIgnoreCase))
        {
            path = path["/routes".Length..];
        }
        else if (path.StartsWith("routes/", StringComparison.OrdinalIgnoreCase))
        {
            path = "/" + path["routes/".Length..];
        }

        var idx = path.IndexOf("/routes/", StringComparison.OrdinalIgnoreCase);
        if (idx >= 0)
        {
            var prefix = path[..idx];
            var after = path[(idx + "/routes".Length)..];
            if (after.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))
            {
                path = prefix + after[prefix.Length..];
            }
        }

        return path;
    }
}



<Editor
    ScriptSrc="libman/tinymce/tinymce.min.js"
    LicenseKey="gpl"
    @bind-Value="_content"
    JsConfSrc="myTinyMceConfig" />

@code {
    private string _content = "<p>Hello, world!</p>";
}
